<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Knowledge Hub</title>
    <link>http://localhost:1313/docs/k8s/</link>
    <description>Recent content in Kubernetes on Knowledge Hub</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/docs/k8s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Architecture</title>
      <link>http://localhost:1313/docs/k8s/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/k8s/architecture/</guid>
      <description>kubernetes cluster components&#xA;Master Masters is responsible for Managing the cluster. Scheduling the deployments. Exposing the kubernetes API. Kubernetes master automatically handles scheduling the pods across the Nodes in the cluster. The Master&amp;rsquo;s automatic scheduling takes into account the available resources on each Node. Node A Node is a worker machine in Kubernetes and may be either a virtual or a physical machine, depending on the cluster. Each Node is managed by the Master.</description>
    </item>
    <item>
      <title>Deployments</title>
      <link>http://localhost:1313/docs/k8s/deployments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/k8s/deployments/</guid>
      <description>Deployments in Kubernetes&#xA;The Deployment instructs Kubernetes how to create and update instances of your application.&#xA;The Kubernetes master schedules mentioned application instances onto individual Nodes in the cluster.&#xA;Once the application instances are created, a Kubernetes Deployment Controller continuously monitors those instances.&#xA;Deployment $ kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node deployment.apps/hello-node created $ kubectl get deployments NAME READY UP-TO-DATE AVAILABLE AGE hello-node 1/1 1 1 19s $ kubectl get pods NAME READY STATUS RESTARTS AGE hello-node-55b49fb9f8-bkmnb 1/1 Running 0 43s $ kubectl get events LAST SEEN TYPE REASON OBJECT MESSAGE 94s Normal Scheduled pod/hello-node-55b49fb9f8-bkmnb Successfully assigned default/hello-node-55b49fb9f8-bkmnb to minikube 92s Normal Pulling pod/hello-node-55b49fb9f8-bkmnb Pulling image &amp;#34;gcr.</description>
    </item>
    <item>
      <title>Installing Kubernetes</title>
      <link>http://localhost:1313/docs/k8s/installingk8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/k8s/installingk8s/</guid>
      <description>[This page is under construction &amp;hellip;]&#xA;I am going to cover installation of kubernetes in two ways as mentioned below:&#xA;Install kubernetes with kubeadm Install kubernetes the hard way Prerequisites to install kubernetes with kubeadm&#xA;VirtualBox Centos Image Virtual Machine with min 2 CPU Install kubelet, kubectl and kubeadm Installing-kubeadm-kubelet-and-kubectl&#xA;# This script is the modified version from k8s documentation RELEASE=&amp;#34;$(curl -sSL https://dl.k8s.io/release/stable.txt)&amp;#34; mkdir -p /usr/bin cd /usr/bin curl -L --remote-name-all https://storage.</description>
    </item>
    <item>
      <title>Kind</title>
      <link>http://localhost:1313/docs/k8s/kind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/k8s/kind/</guid>
      <description>kind : kubernetes in docker&#xA;# Set go path, kind path and KUBECONFIG path export PATH=$PATH:$HOME/go/bin:$HOME/k8s/bin kind get kubeconfig-path) # output: /home/sriram/.kube/kind-config-kind export KUBECONFIG=&amp;#34;$(kind get kubeconfig-path)&amp;#34; sriram@sriram-Inspiron-5567:~$ kind create cluster Creating cluster &amp;#34;kind&amp;#34; ... ‚úì Ensuring node image (kindest/node:v1.15.0) üñº ‚úì Preparing nodes üì¶ ‚úì Creating kubeadm config üìú ‚úì Starting control-plane üïπÔ∏è ‚úì Installing CNI üîå ‚úì Installing StorageClass üíæ Cluster creation complete. You can now use the cluster with: export KUBECONFIG=&amp;#34;$(kind get kubeconfig-path --name=&amp;#34;kind&amp;#34;)&amp;#34; kubectl cluster-info kind create cluster kubectl cluster-info Kubernetes master is running at https://localhost:37933 KubeDNS is running at https://localhost:37933/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy # To further debug and diagnose cluster problems, use &amp;#39;kubectl cluster-info dump&amp;#39;.</description>
    </item>
    <item>
      <title>kubectl</title>
      <link>http://localhost:1313/docs/k8s/kubectl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/k8s/kubectl/</guid>
      <description>kubectl is the command line interface which uses kubernetes API to interact with the cluster&#xA;kubectl version Once kubectl is configured we can see both the version of the client and as well as the server. The client version is the kubectl version; the server version is the Kubernetes version installed on the master. You can also see details about the build.&#xA;$ kubectl version Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;15&amp;#34;, GitVersion:&amp;#34;v1.15.2&amp;#34;, GitCommit:&amp;#34;f6278300bebbb750328ac16ee6dd3aa7d3549568&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2019-08-05T09:23:26Z&amp;#34;, GoVersion:&amp;#34;go1.</description>
    </item>
    <item>
      <title>Minikube</title>
      <link>http://localhost:1313/docs/k8s/minikube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/k8s/minikube/</guid>
      <description>minikube is a tool/utility which runs a single node kuberbetes cluster using a virtual box. This tool helps in learning k8s with local setup.&#xA;starting minikube for the first time sriram@sriram-Inspiron-5567:~/k8s$ minikube start üòÑ minikube v1.2.0 on linux (amd64) üíø Downloading Minikube ISO ... 129.33 MB / 129.33 MB [============================================] 100.00% 0s üî• Creating virtualbox VM (CPUs=2, Memory=2048MB, Disk=20000MB) ... üê≥ Configuring environment for Kubernetes v1.15.0 on Docker 18.09.6 üíæ Downloading kubeadm v1.</description>
    </item>
    <item>
      <title>Pod</title>
      <link>http://localhost:1313/docs/k8s/pod/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/k8s/pod/</guid>
      <description>Kubernetes PODS&#xA;$ kubectl describe pods Name: kubernetes-bootcamp-5b48cfdcbd-5ddlwNamespace: defaultPriority: 0 Node: minikube/172.17.0.90 Start Time: Mon, 26 Aug 2019 11:54:05 +0000 Labels: pod-template-hash=5b48cfdcbd run=kubernetes-bootcamp Annotations: &amp;lt;none&amp;gt; Status: Running IP: 172.18.0.5 Controlled By: ReplicaSet/kubernetes-bootcamp-5b48cfdcbd Containers: kubernetes-bootcamp: Container ID: docker://016f25827984c14dc74e5cbaafe43b0fb77b20b8838b5818d1e9a90376b8ad5d Image: gcr.io/google-samples/kubernetes-bootcamp:v1 Image ID: docker-pullable://jocatalin/kubernetes-bootcamp@sha256:0d6b8ee63bb57c5f5b6156f446b3bc3b3c143d233037f3a2f00e279c8fcc64af Port: 8080/TCP Host Port: 0/TCP State: Running Started: Mon, 26 Aug 2019 11:54:06 +0000 Ready: True Restart Count: 0 Environment: &amp;lt;none&amp;gt; Mounts: /var/run/secrets/kubernetes.io/serviceaccount from default-token-5wbkl (ro) Conditions: Type Status Initialized True Ready True ContainersReady True PodScheduled True Volumes: default-token-5wbkl: Type: Secret (a volume populated by a Secret) SecretName: default-token-5wbkl Optional: false QoS Class: BestEffort Node-Selectors: &amp;lt;none&amp;gt; Tolerations: node.</description>
    </item>
    <item>
      <title>Secrets</title>
      <link>http://localhost:1313/docs/k8s/secrets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/k8s/secrets/</guid>
      <description>Managing kubernetes secrets&#xA;Secret Manifest with default secret type:&#xA;apiVersion: v1 kind: Secret metadata: name: mysecret type: Opaque data: username: User password: ********** $ kubectl apply -f ./secret.yaml $ kubectl get secrets NAME TYPE DATA AGE default-token-prh24 kubernetes.io/service-account-token 3 27m mysecret Opaque 2 14m type: Opaque means that from kubernetes&amp;rsquo;s point of view the contents of this Secret is unstructured, it can contain arbitrary key-value pairs.&#xA;SecretType = &amp;ldquo;Opaque&amp;rdquo; // Opaque (arbitrary data; default) SecretType = &amp;ldquo;kubernetes.</description>
    </item>
    <item>
      <title>Troubleshooting</title>
      <link>http://localhost:1313/docs/k8s/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/k8s/troubleshooting/</guid>
      <description>Troubleshooting&#xA;kubectl get - list resources&#xA;kubectl describe - show detailed information about a resource&#xA;kubectl logs - print the logs from a container in a pod&#xA;kubectl exec - execute a command on a container in a pod&#xA;$ export POD_NAME=$(kubectl get pods -o go-template --template &amp;#39;{{range .items}}{{.metadata.name}}{{&amp;#34;\n&amp;#34;}}{{end}}&amp;#39;) $ echo $POD_NAME kubernetes-bootcamp-5b48cfdcbd-5ddlw $ kubectl exec $POD_NAME env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin HOSTNAME=kubernetes-bootcamp-5b48cfdcbd-5ddlw KUBERNETES_SERVICE_HOST=10.96.0.1 KUBERNETES_SERVICE_PORT=443 KUBERNETES_SERVICE_PORT_HTTPS=443 KUBERNETES_PORT=tcp://10.96.0.1:443 KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443 KUBERNETES_PORT_443_TCP_PROTO=tcp KUBERNETES_PORT_443_TCP_PORT=443 KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1 NPM_CONFIG_LOGLEVEL=info NODE_VERSION=6.3.1 HOME=/root # Start a bash session in the Pod‚Äôs container: ## name of the container can be omitted if we only have a single container in the Pod kubectl exec -ti $POD_NAME bash </description>
    </item>
  </channel>
</rss>
