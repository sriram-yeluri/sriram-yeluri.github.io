<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Knowledge Hub</title>
    <link>http://localhost:1313/docs/security/</link>
    <description>Recent content in Security on Knowledge Hub</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/docs/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SELinux</title>
      <link>http://localhost:1313/docs/security/selinux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/security/selinux/</guid>
      <description>Security Enhanced Linux&#xA;SELinux is built into the kernel, and provides a non-discretional (ie. mandatory) access control framework for controlling how OS objects such as ports, users, and executables may interact.&#xA;kernel level mandatory access control mechanism. SELinux is a security mechanism built into the Linux kernel. Linux distributions like CentOS, RHEL, and Fedora are enabled with SELinux by default. SELinux Modes Enforcing: The default mode which will enable and enforce the SELinux security policy on the system, denying access and logging actions Permissive: In Permissive mode, SELinux is enabled but will not enforce the security policy, only warn and log actions.</description>
    </item>
    <item>
      <title>SSH</title>
      <link>http://localhost:1313/docs/security/ssh/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/security/ssh/</guid>
      <description>How SSH communication is established The client sends a request to the server for a secure session. The server responds by sending its X.509 digital certificate to the client.&#xA;The client receives the server&amp;rsquo;s X.509 digital certificate.&#xA;The client authenticates the server, using a list of known certificate authorities.&#xA;The client generates a random symmetric key and encrypts it using server&amp;rsquo;s public key.&#xA;The server decrypts the message with private key and extracts the symmetric key sent by client.</description>
    </item>
    <item>
      <title>TLS</title>
      <link>http://localhost:1313/docs/security/tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/security/tls/</guid>
      <description>TLS - Transport Layer Security&#xA;TLS is a protocol for encrypting internet traffic and to verify the identity of server.&#xA;How to extract remote Certificates echo | openssl s_client -connect www.google.com:443 2&amp;gt;&amp;amp;1 | sed --quiet &amp;#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&amp;#39; &amp;gt; google.crt How to verify the TLS connection status ?&#xA;sriram@sriram-Inspiron-5567:~$ openssl s_client -connect google.com:443 -servername google.com -cipher ALL -brief CONNECTION ESTABLISHED Protocol version: TLSv1.3 Ciphersuite: TLS_AES_256_GCM_SHA384 Peer certificate: C = US, ST = California, L = Mountain View, O = Google LLC, CN = *.</description>
    </item>
  </channel>
</rss>
